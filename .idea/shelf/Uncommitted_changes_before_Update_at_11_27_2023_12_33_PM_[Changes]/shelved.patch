Index: src/UI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.concurrent.TimeUnit;\r\nimport java.util.Scanner;\r\n\r\npublic class UI {\r\n\r\n    Member member = new Member(\"first name\", \"last name\", 1990, \"email\", \"adresse\", true, true);\r\n    Scanner scanner = new Scanner(System.in);\r\n    FileHandling fileHandling = new FileHandling();\r\n\r\n    public String typeFirstName() {\r\n        String firstName = \"\";\r\n        while (firstName.isEmpty()) {\r\n            System.out.println(\"Please enter the new members first name:\");\r\n            firstName = scanner.nextLine().trim();\r\n            if (firstName.isEmpty()) {\r\n                System.out.println(\"Field can't be empty. try again\");\r\n            }\r\n        }\r\n        return firstName;\r\n    }\r\n\r\n    public String typeLastName() {\r\n        String lastName = \"\";\r\n        while (lastName.isEmpty()) {\r\n            System.out.println(\"Please enter the new members last name:\");\r\n            lastName = scanner.nextLine().trim();\r\n            if (lastName.isEmpty()) {\r\n                System.out.println(\"Field can't be empty. try again\");\r\n            }\r\n        }\r\n        return lastName;\r\n    }\r\n\r\n    public int typeYearOfBirth() {//kontrol for for langt tal\r\n        int yearOfBirth = -1;\r\n        boolean validInput = false;\r\n\r\n        while (!validInput) {\r\n            System.out.println(\"Please enter the new members birthyear\");\r\n            try {\r\n                yearOfBirth = Integer.parseInt(scanner.nextLine().trim());\r\n                validInput = true;\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Invalid input. Try again.\");\r\n            }\r\n        }\r\n        return yearOfBirth;\r\n    }\r\n\r\n\r\n    public String typeEmailAdress() { //skal der tilføjes noget for at sikre at der indtastes et gyldigt email format?\r\n        String emailAdress = \"\";\r\n        while (emailAdress.isEmpty()) {\r\n            System.out.println(\"Please enter the new members Email adress:\");\r\n            emailAdress = scanner.nextLine().trim();\r\n            if (emailAdress.isEmpty()) {\r\n                System.out.println(\"Field can't be empty. try again\");\r\n            }\r\n        }\r\n        return emailAdress;\r\n    }\r\n\r\n\r\n    public String typeAdress() { //skal der tilføjes noget ift. nummer?\r\n        String adress = \"\";\r\n        while (adress.isEmpty()) {\r\n            System.out.println(\"Please enter the new members adress:\");\r\n            adress = scanner.nextLine().trim();\r\n            if (adress.isEmpty()) {\r\n                System.out.println(\"Field can't be empty. try again\");\r\n            }\r\n        }\r\n        return adress;\r\n    }\r\n\r\n    public boolean isActive() {\r\n        int choice = 0;\r\n        boolean isActive = false;\r\n        System.out.println(\"Does the member want an active membership?\");\r\n        System.out.println(\"1. Yes\");\r\n        System.out.println(\"2. No\");\r\n        choice = scanner.nextInt();\r\n        switch (choice) {\r\n            case 1 -> isActive = true;\r\n            case 2 -> isActive = false;\r\n            default -> {\r\n                System.out.println(\"Invalid choice. Try again.\");\r\n                isActive();\r\n            }\r\n        }\r\n        return isActive;\r\n    }\r\n\r\n    public boolean hasPaid() {\r\n        int choice = 0;\r\n        boolean hasPaid = false;\r\n        System.out.println(\"Has the member paid?\");\r\n        System.out.println(\"1. Yes\");\r\n        System.out.println(\"2. No\");\r\n        choice = scanner.nextInt();\r\n        switch (choice) {\r\n            case 1 -> {\r\n                hasPaid = true;\r\n                printConfirmationForPayment(member);\r\n\r\n            }\r\n            case 2 -> hasPaid = false;\r\n            default -> {\r\n                System.out.println(\"Invalid choice. Try again.\");\r\n                hasPaid();\r\n            }\r\n        }\r\n        return hasPaid;\r\n\r\n    }\r\n\r\n    public void printConfirmationForPayment(Member member) {\r\n        Subscription Subscription = new Subscription();\r\n        System.out.println(\"You're subscription is:  \" +\r\n                Subscription.getSubscriptionPrice(member) + \"$$$.\");\r\n        try {\r\n            System.out.println(\"Proccessing Payment.\");\r\n            TimeUnit.SECONDS.sleep(1);\r\n            System.out.println(\"Proccessing Payment..\");\r\n            TimeUnit.SECONDS.sleep(1);\r\n            System.out.println(\"Proccessing Payment...\");\r\n            TimeUnit.SECONDS.sleep(1);\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        System.out.println(\"Payment received!\");\r\n    }\r\n\r\n    public int getUserInputInt() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        removeMessage();\r\n        return scanner.nextInt();\r\n    }\r\n\r\n    public void removeMessage() {\r\n        System.out.println(\"Enter the number corresponding to the member you want to remove: \");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UI.java b/src/UI.java
--- a/src/UI.java	(revision d83c8147977a92ed0c6f0406c9ca6a566249bf6e)
+++ b/src/UI.java	(date 1700807237026)
@@ -3,7 +3,7 @@
 
 public class UI {
 
-    Member member = new Member("first name", "last name", 1990, "email", "adresse", true, true);
+
     Scanner scanner = new Scanner(System.in);
     FileHandling fileHandling = new FileHandling();
 
